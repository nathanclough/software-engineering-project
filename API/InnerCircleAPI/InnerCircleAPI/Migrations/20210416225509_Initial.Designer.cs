// <auto-generated />
using InnerCircleAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InnerCircleAPI.Migrations
{
    [DbContext(typeof(InnerCircleDataContext))]
    [Migration("20210416225509_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("InnerCircleAPI.Models.Account", b =>
                {
                    b.Property<long>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.HasKey("AccountId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("InnerCircleAPI.Models.Circle", b =>
                {
                    b.Property<long>("CircleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AccountId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CircleId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Circles");
                });

            modelBuilder.Entity("InnerCircleAPI.Models.CircleMember", b =>
                {
                    b.Property<long>("CircleMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CircleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CircleMemberId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CircleId");

                    b.ToTable("CircleMembers");
                });

            modelBuilder.Entity("InnerCircleAPI.Models.Email", b =>
                {
                    b.Property<long>("EmailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AccountID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("EmailID");

                    b.HasIndex("AccountID")
                        .IsUnique();

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("InnerCircleAPI.Models.Password", b =>
                {
                    b.Property<long>("PasswordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AccountID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("PasswordID");

                    b.HasIndex("AccountID")
                        .IsUnique();

                    b.ToTable("Passwords");
                });

            modelBuilder.Entity("InnerCircleAPI.Models.Post", b =>
                {
                    b.Property<long>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("MediaUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("PostId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("InnerCircleAPI.Models.Request", b =>
                {
                    b.Property<long>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("RecepientId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SenderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.HasKey("RequestId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("InnerCircleAPI.Models.Username", b =>
                {
                    b.Property<long>("UsernameID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("AccountID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UsernameID");

                    b.HasIndex("AccountID")
                        .IsUnique();

                    b.ToTable("Usernames");
                });

            modelBuilder.Entity("InnerCircleAPI.Models.Circle", b =>
                {
                    b.HasOne("InnerCircleAPI.Models.Account", "Account")
                        .WithOne("Circle")
                        .HasForeignKey("InnerCircleAPI.Models.Circle", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("InnerCircleAPI.Models.CircleMember", b =>
                {
                    b.HasOne("InnerCircleAPI.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InnerCircleAPI.Models.Circle", "Circle")
                        .WithMany("Members")
                        .HasForeignKey("CircleId")
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Circle");
                });

            modelBuilder.Entity("InnerCircleAPI.Models.Email", b =>
                {
                    b.HasOne("InnerCircleAPI.Models.Account", null)
                        .WithOne("Email")
                        .HasForeignKey("InnerCircleAPI.Models.Email", "AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InnerCircleAPI.Models.Password", b =>
                {
                    b.HasOne("InnerCircleAPI.Models.Account", null)
                        .WithOne("Password")
                        .HasForeignKey("InnerCircleAPI.Models.Password", "AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InnerCircleAPI.Models.Username", b =>
                {
                    b.HasOne("InnerCircleAPI.Models.Account", null)
                        .WithOne("Username")
                        .HasForeignKey("InnerCircleAPI.Models.Username", "AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InnerCircleAPI.Models.Account", b =>
                {
                    b.Navigation("Circle");

                    b.Navigation("Email");

                    b.Navigation("Password");

                    b.Navigation("Username");
                });

            modelBuilder.Entity("InnerCircleAPI.Models.Circle", b =>
                {
                    b.Navigation("Members");
                });
#pragma warning restore 612, 618
        }
    }
}
